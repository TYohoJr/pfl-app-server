{"version":3,"sources":["project-images/pfl-logo.png","reducers.js","ProductInfoModal/ProductInfoModal.js","ProductList/ProductList.js","UserCheckoutModal/UserCheckoutModal.js","UserOrderCart/UserOrderCart.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","combineReducers","userDetailsReducer","state","action","firstName","lastName","companyName","addressOne","addressTwo","city","userState","postalCode","countryCode","email","phone","orderReference","type","Object","objectSpread","userOrderCartReducer","productNameArray","productInfoArray","ProductInfoModal","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","modal","setState","react_default","a","createElement","Button","id","onClick","productName","Modal","isOpen","className","ModalHeader","ModalBody","src","imageURL","alt","lastUpdated","ModalFooter","color","React","Component","ProductList","addProductToOrder","productsList","e","sequenceCounter","length","newProductObject","ItemSequenceNumber","ProductID","Number","target","value","Quantity","ItemFile","TemplateData","ItemID","indexOf","parentNode","innerText","push","splice","dispatch","_this2","axios","post","then","result","data","body","results","map","quantityMinimum","productID","onChange","src_ProductInfoModal_ProductInfoModal","name","connect","UserCheckoutModal","createOrder","onFirstNameChange","onLastNameChange","onCompanyNameChange","onAddressOneChange","onAddressTwoChange","onCityChange","onStateChange","onPostalCodeChange","onCountryCodeChange","onEmailChange","onPhoneChange","onOrderReferenceChange","alert","user","userDetails","orderProductInfo","orderNumber","concat","meta","time","orderPrices","orderTotalPrice","toFixed","partnerOrderReference","console","log","errorsArray","errors","index","dataElementErrors","value2","dataElement","alertMessage","statusCode","split","i","join","Label","Input","placeholder","maxLength","UserOrder","userCart","key","src_UserCheckoutModal_UserCheckoutModal","store","createStore","reducer","App","es","require","Date","toDateString","src_ProductList_ProductList","UserOrderCart_UserOrderCart","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","App_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6ec37d1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pfl-logo.158a06ca.png\";","import { combineReducers } from 'redux';\n\n// This is the store of all the Redux reducers\n\n// Reducer of all the info that is in the users cart\nconst userOrderCartReducer = (state, action) => {\n    if (!state) {\n        state = {\n            productNameArray: [],\n            productInfoArray: []\n        }\n    }\n    switch (action.type) {\n        case \"addItemToCart\":\n            return state = {\n                productNameArray: action.productNameArray,\n                productInfoArray: action.productInfoArray\n            }\n        case \"clearOrderCart\":\n            return state = {\n                productNameArray: [],\n                productInfoArray: []\n            }\n        default:\n            return {\n                ...state\n            }\n    }\n}\n\n// Reducer of all the user details they input in the form in UserCheckoutModal.js\nconst userDetailsReducer = (state, action) => {\n    if (!state) {\n        state = {\n            firstName: null,\n            lastName: null,\n            companyName: null,\n            addressOne: null,\n            addressTwo: null,\n            city: null,\n            userState: null,\n            postalCode: null,\n            countryCode: null,\n            email: null,\n            phone: null,\n            orderReference: null\n        }\n    }\n    switch (action.type) {\n        case \"onFirstNameChange\":\n            return state = {\n                ...state,\n                firstName: action.firstName\n            }\n        case \"onLastNameChange\":\n            return state = {\n                ...state,\n                lastName: action.lastName\n            }\n        case \"onCompanyNameChange\":\n            return state = {\n                ...state,\n                companyName: action.companyName\n            }\n        case \"onAddressOneChange\":\n            return state = {\n                ...state,\n                addressOne: action.addressOne\n            }\n        case \"onAddressTwoChange\":\n            return state = {\n                ...state,\n                addressTwo: action.addressTwo\n            }\n        case \"onCityChange\":\n            return state = {\n                ...state,\n                city: action.city\n            }\n        case \"onStateChange\":\n            return state = {\n                ...state,\n                userState: action.userState\n            }\n        case \"onPostalCodeChange\":\n            return state = {\n                ...state,\n                postalCode: action.postalCode\n            }\n        case \"onCountryCodeChange\":\n            return state = {\n                ...state,\n                countryCode: action.countryCode\n            }\n        case \"onEmailChange\":\n            return state = {\n                ...state,\n                email: action.email\n            }\n        case \"onPhoneChange\":\n            return state = {\n                ...state,\n                phone: action.phone\n            }\n        case \"onOrderReferenceChange\":\n            return state = {\n                ...state,\n                orderReference: action.orderReference\n            }\n        default:\n            return {\n                ...state\n            }\n    }\n}\n\nexport default combineReducers({\n    userDetailsReducer: userDetailsReducer,\n    userOrderCartReducer: userOrderCartReducer\n});\n","import React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport \"./ProductInfoModal.css\"\n\nclass ProductInfoModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.toggle = this.toggle.bind(this);\n        this.state = {\n            modal: false\n        };\n    }\n\n    toggle() {\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Button id=\"product-list-button\" onClick={this.toggle}>{this.props.productName}</Button>\n                <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n                    <ModalHeader toggle={this.toggle}>{this.props.productName}</ModalHeader>\n                    <ModalBody>\n                        <img id=\"product-modal-img\" src={this.props.imageURL} alt=\"no example available\" />\n                        <p>Last Updated: {this.props.lastUpdated}</p>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"secondary\" onClick={this.toggle}>Ok</Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default ProductInfoModal;","import React, { Component } from 'react';\nimport './ProductList.css';\nimport axios from \"axios\";\nimport { connect } from 'react-redux';\nimport ProductInfoModal from \"../ProductInfoModal/ProductInfoModal\";\n\n// Arrays to store both the names and valuable info about the products the user has added to their cart\n// The productNamesArray is mapped in the render method of UserOrderCart.js\nvar productNameArray = [];\nvar productInfoArray = [];\n\nclass ProductList extends Component {\n    constructor() {\n        super();\n        this.addProductToOrder = this.addProductToOrder.bind(this);\n        this.state = {\n            // Set the initial state to a string to inform the user that the product list is loading from the API\n            productsList: 'loading product list..'\n        }\n    }\n\n    // Function to conditionally add the selected product to the users cart\n    addProductToOrder(e) {\n        // Add incrementing variable to give each product a unique id\n        let sequenceCounter = productInfoArray.length + 1\n        // Change the productID and quantity from a sting to a number\n        let productIdNumber = Number(e.target.value);\n        let productQuantity = Number(e.target.id);\n        // Create an object of the product and all it's info\n        let newProductObject = { \"ItemSequenceNumber\": sequenceCounter, \"ProductID\": productIdNumber, \"Quantity\": productQuantity, \"ItemFile\": \"http://www.mydomain.com/itemFiles/myItemFile.pdf\", \"TemplateData\": null, \"ItemID\": sequenceCounter }\n        // If the product doesn't exist in the array then push it onto it, otherwise splice it out\n        if (productNameArray.indexOf(e.target.parentNode.innerText) === -1) {\n            productNameArray.push(e.target.parentNode.innerText);\n            productInfoArray.push(newProductObject);\n        } else {\n            productNameArray.splice(productNameArray.indexOf(e.target.parentNode.innerText), 1)\n            productInfoArray.splice(newProductObject, 1)\n        }\n        // Send both arrays to reducers.js so they can be accessed in UserCheckoutModal.js upon checkout\n        this.props.dispatch({\n            type: \"addItemToCart\",\n            productNameArray: productNameArray,\n            productInfoArray: productInfoArray\n        })\n    }\n\n    render() {\n        // If the product list hasn't been obtained yet, call the API to obtain it\n        if (this.state.productsList === 'loading product list..') {\n            axios.post(\"/getProducts\").then((result) => {\n                this.setState({\n                    // Map the product list into the displayed table, along with a checkbox so the user can select them and a modal to view an example image\n                    productsList: result.data.body.results.data.map((value) => {\n                        return <tr>\n                            <td className={value.id}><input className=\"product-list-checkbox\" type=\"checkbox\" id={value.quantityMinimum} value={value.productID} onChange={this.addProductToOrder} /><ProductInfoModal imageURL={value.imageURL} productName={value.name} lastUpdated={value.lastUpdated} /></td>\n                        </tr>\n                    })\n                })\n            })\n        }\n        return (\n            <div id=\"product-list-div\">\n                <h3>Product List</h3>\n                {/*Table of available products from the API*/}\n                <div id=\"product-list-table\">\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Available Products</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.productsList}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect((state) => (state))(ProductList);","import React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Label } from 'reactstrap';\nimport \"./UserCheckoutModal.css\";\nimport axios from \"axios\";\nimport { connect } from 'react-redux';\n\nclass UserCheckoutModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.toggle = this.toggle.bind(this);\n        this.createOrder = this.createOrder.bind(this);\n        this.onFirstNameChange = this.onFirstNameChange.bind(this);\n        this.onLastNameChange = this.onLastNameChange.bind(this);\n        this.onCompanyNameChange = this.onCompanyNameChange.bind(this);\n        this.onAddressOneChange = this.onAddressOneChange.bind(this);\n        this.onAddressTwoChange = this.onAddressTwoChange.bind(this);\n        this.onCityChange = this.onCityChange.bind(this);\n        this.onStateChange = this.onStateChange.bind(this);\n        this.onPostalCodeChange = this.onPostalCodeChange.bind(this);\n        this.onCountryCodeChange = this.onCountryCodeChange.bind(this);\n        this.onEmailChange = this.onEmailChange.bind(this);\n        this.onPhoneChange = this.onPhoneChange.bind(this);\n        this.onOrderReferenceChange = this.onOrderReferenceChange.bind(this);\n        // State of the checkout modal being open or close\n        this.state = {\n            modal: false\n        };\n    }\n    // Toggle the modal open/close, but only is the user has something in their cart\n    toggle() {\n        if (!this.props.userOrderCartReducer.productNameArray.length) {\n            alert(\"Your cart is empty!\");\n            return;\n        }\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n    // Conditionally send the order to the server\n    createOrder() {\n        // Simplify data structure\n        let user = this.props.userDetailsReducer\n        // Check if all required fields are filled out, break out of function if one is not\n        switch (true) {\n            case !user.firstName:\n                return alert(\"First Name can't be blank\");\n            case !user.lastName:\n                return alert(\"Last Name can't be blank\");\n            case !user.addressOne:\n                return alert(\"Address can't be blank\");\n            case !user.city:\n                return alert(\"City can't be blank\");\n            case !user.userState:\n                return alert(\"State can't be blank\");\n            case !user.postalCode:\n                return alert(\"Postal Code can't be blank\");\n            case !user.countryCode:\n                return alert(\"Country Code can't be blank\");\n            case !user.email:\n                return alert(\"Email can't be blank\");\n            case !user.phone:\n                return alert(\"Phone Number can't be blank\");\n            default:\n                break;\n        }\n        // Make sure phone number is in the correct format\n        if (user.phone.length !== 10) return alert(\"Phone number should be in 10 digit format\");\n        // Make sure state is in 2 digit format\n        if (user.userState.length !== 2) return alert(\"Please use the 2-digit format for your state\");\n        // Make sure postal code is in the 5 digit format\n        if (user.postalCode.length !== 5) return alert(\"Please use the 5 digit format for your postal code\");\n        // Send all the order and customer information to the server\n        axios.post(\"/createOrder\", { userDetails: this.props.userDetailsReducer, orderProductInfo: this.props.userOrderCartReducer.productInfoArray }).then((result) => {\n            // If an order number is received send it to the customer in an alert\n            if (result.data.body.results.data.orderNumber) {\n                alert(`Your order was successfully submitted on ${result.data.body.meta.time} (server time)\\nOrder Total: ${result.data.body.results.data.orderPrices.orderTotalPrice.toFixed(2)}\\nYour order number is: ${result.data.body.results.data.orderNumber}\\nYour reference ID is: ${result.data.body.results.data.partnerOrderReference}\\nPlease keep a record of both of these ID's`);\n                console.log(result.data);\n                // Clear their cart to prevent duplicate orders\n                this.props.dispatch({\n                    type: \"clearOrderCart\"\n                })\n                // Close modal\n                this.setState({\n                    modal: false\n                })\n                // Error handling if an order number isn't recieved\n            } else {\n                // Map the array of errors\n                let errorsArray = result.data.body.results.errors.map((value, index) => {\n                    // Inside of the first map, map the array of error details that exists inside of each individual error\n                    return value.dataElementErrors.map((value2) => {\n                        return `Error ${index}\\nType: ${value.dataElement}\\nDetails: ${value2}\\n\\n`\n                    })\n                })\n                // Splice out the commas that are generated from the map functions\n                let alertMessage = `Failed to submit order\\nStatus Code: ${result.data.body.meta.statusCode}\\n\\n${errorsArray}`;\n                alertMessage = alertMessage.split('')\n                for (var i = 0; i < alertMessage.length; i++) {\n                    // The commas are placed either right before \"Type\" or right before \"Error\"\n                    if (alertMessage[i] === \",\" && (alertMessage[i + 1] === \"T\" || alertMessage[i + 1] === \"E\")) {\n                        alertMessage.splice(i, 1)\n                    }\n                }\n                alertMessage = alertMessage.join('')\n                // Send the compiled error message back to the user\n                alert(alertMessage);\n            }\n        })\n    }\n    // Send the form info to reducers.js(redux) on every change of an input field\n    onFirstNameChange(e) {\n        this.props.dispatch({\n            type: \"onFirstNameChange\",\n            firstName: e.target.value\n        })\n    }\n\n    onLastNameChange(e) {\n        this.props.dispatch({\n            type: \"onLastNameChange\",\n            lastName: e.target.value\n        })\n    }\n\n    onCompanyNameChange(e) {\n        this.props.dispatch({\n            type: \"onCompanyNameChange\",\n            companyName: e.target.value\n        })\n    }\n\n    onAddressOneChange(e) {\n        this.props.dispatch({\n            type: \"onAddressOneChange\",\n            addressOne: e.target.value\n        })\n    }\n\n    onAddressTwoChange(e) {\n        this.props.dispatch({\n            type: \"onAddressTwoChange\",\n            addressTwo: e.target.value\n        })\n    }\n\n    onCityChange(e) {\n        this.props.dispatch({\n            type: \"onCityChange\",\n            city: e.target.value\n        })\n    }\n\n    onStateChange(e) {\n        this.props.dispatch({\n            type: \"onStateChange\",\n            userState: e.target.value\n        })\n    }\n\n    onPostalCodeChange(e) {\n        this.props.dispatch({\n            type: \"onPostalCodeChange\",\n            postalCode: e.target.value\n        })\n    }\n\n    onCountryCodeChange(e) {\n        this.props.dispatch({\n            type: \"onCountryCodeChange\",\n            countryCode: e.target.value\n        })\n    }\n\n    onEmailChange(e) {\n        this.props.dispatch({\n            type: \"onEmailChange\",\n            email: e.target.value\n        })\n    }\n\n    onPhoneChange(e) {\n        this.props.dispatch({\n            type: \"onPhoneChange\",\n            phone: e.target.value\n        })\n    }\n\n    onOrderReferenceChange(e) {\n        this.props.dispatch({\n            type: \"onOrderReferenceChange\",\n            orderReference: e.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Button color=\"primary\" onClick={this.toggle}>Checkout</Button>\n                <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n                    <ModalHeader toggle={this.toggle}>Customer Info</ModalHeader>\n                    <ModalBody>\n                        {/*Have the user input all required information about the order*/}\n                        <Label>Name</Label>\n                        <Input type=\"text\" placeholder=\"First Name\" maxLength=\"128\" onChange={this.onFirstNameChange} />\n                        <Input type=\"text\" placeholder=\"Last Name\" maxLength=\"128\" onChange={this.onLastNameChange} />\n                        <Label>Company Name</Label>\n                        <Input type=\"text\" placeholder=\"Company Name\" maxLength=\"50\" onChange={this.onCompanyNameChange} />\n                        <Label>Address</Label>\n                        <Input type=\"text\" placeholder=\"Address Line 1\" maxLength=\"70\" onChange={this.onAddressOneChange} />\n                        <Input type=\"text\" placeholder=\"Address Line 2\" maxLength=\"128\" onChange={this.onAddressTwoChange} />\n                        <Input type=\"text\" placeholder=\"City\" maxLength=\"36\" onChange={this.onCityChange} />\n                        <Input type=\"text\" placeholder=\"State\" maxLength=\"255\" onChange={this.onStateChange} />\n                        <Input type=\"text\" placeholder=\"Postal Code\" maxLength=\"10\" onChange={this.onPostalCodeChange} />\n                        <Input type=\"text\" placeholder=\"Country Code\" maxLength=\"70\" onChange={this.onCountryCodeChange} />\n                        <Label>Email</Label>\n                        <Input type=\"text\" placeholder=\"example@email.com\" maxLength=\"60\" onChange={this.onEmailChange} />\n                        <Label>Phone Number</Label>\n                        <Input type=\"text\" placeholder=\"1234567890\" maxLength=\"20\" onChange={this.onPhoneChange} />\n                        <Label>Order Reference ID</Label><small> *This is used solely for your references*</small>\n                        <Input type=\"text\" placeholder=\"Order Reference ID\" maxLength=\"128\" onChange={this.onOrderReferenceChange} />\n                    </ModalBody>\n                    <ModalFooter>\n                        {/*Attempt to submit the order*/}\n                        <Button color=\"success\" onClick={this.createOrder}>Submit Order</Button>{' '}\n                        {/*Close the modal and don't send the order*/}\n                        <Button color=\"danger\" onClick={this.toggle}>Cancel</Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default connect((state) => (state))(UserCheckoutModal);","import React, { Component } from 'react';\nimport './UserOrderCart.css';\nimport { connect } from 'react-redux';\nimport UserCheckoutModal from \"../UserCheckoutModal/UserCheckoutModal\";\n\n// This component simply renders the users current cart, and displays the checkout button\n\nclass UserOrder extends Component {\n    render() {\n        // Remap users cart of products upon every render of their cart\n        var userCart = this.props.userOrderCartReducer.productNameArray.map((value) => {\n            return <tr>\n                <td key={value}>{value}</td>\n            </tr>\n        })\n        return (\n            <div id=\"user-order-div\">\n                <h3>Your Cart</h3>\n                {/*Table of the users cart info that is updated and rerendered upon change*/}\n                <div>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Product Name</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {userCart}\n                        </tbody>\n                    </table>\n                </div>\n                {/*Button for checkout*/}\n                <UserCheckoutModal />\n            </div>\n        );\n    }\n}\n\nexport default connect((state) => (state))(UserOrder);","import React, { Component } from 'react';\nimport './App.css';\nimport reducer from \"./reducers\";\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport ProductsList from \"./ProductList/ProductList\";\nimport UserOrder from \"./UserOrderCart/UserOrderCart\";\n\n// Define Redux store\nconst store = createStore(reducer);\n\nexport default class App extends Component {\n  render() {\n    return (\n      // Create Redux store\n      <Provider store={store} >\n        <div className=\"App\">\n          <div id=\"header-div\">\n            <img id=\"pfl-logo\" src={require(\"./project-images/pfl-logo.png\")} alt=\"pfl-logo\" />\n            <p id=\"header-date\"><b>{new Date().toDateString()}</b></p>\n            <h1 id=\"app-title\">Welcome to PFL!</h1>\n          </div>\n          <p>Click a product to view an example, then check them off to add it your cart!</p>\n          {/*Main page consists of 2 components, the list of products and the users cart*/}\n          <ProductsList />\n          <UserOrder />\n        </div>\n      </Provider>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}